The best configuration based on validation accuracy was:

AdamW optimizer (lr=0.001)
Original architecture [32, 64, 128]
Dropout rate 0.3
Batch size 32

This reached 85.96% validation accuracy vs:

SGD: 67.74%
Adam smaller model: 74.99%

Using device: mps
Using device: mps
Epoch 1: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:56<00:00, 10.55it/s, loss=1.84, acc=34.7]
Epoch 1:
Train Loss: 1.8386 | Train Acc: 34.68%
Val Loss: 2.0449 | Val Acc: 29.38%
Saved model with val_acc: 29.38%
----------------------------------------------------------------------
Epoch 2: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [05:15<00:00,  9.91it/s, loss=1.77, acc=37.6]
Epoch 2:
Train Loss: 1.7663 | Train Acc: 37.58%
Val Loss: 1.8711 | Val Acc: 39.05%
Saved model with val_acc: 39.05%
----------------------------------------------------------------------
Epoch 3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:50<00:00, 10.74it/s, loss=1.74, acc=38.8]
Epoch 3:
Train Loss: 1.7428 | Train Acc: 38.78%
Val Loss: 1.7940 | Val Acc: 45.13%
Saved model with val_acc: 45.13%
----------------------------------------------------------------------
Epoch 4: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [05:08<00:00, 10.13it/s, loss=1.73, acc=39.3]
Warning: Possible overfitting detected (gap: 3.01%)
Epoch 4:
Train Loss: 1.7310 | Train Acc: 39.26%
Val Loss: 1.9342 | Val Acc: 36.25%
----------------------------------------------------------------------
Epoch 5: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [08:01<00:00,  6.50it/s, loss=1.72, acc=39.5]
Warning: Possible overfitting detected (gap: 8.30%)
Epoch 5:
Train Loss: 1.7226 | Train Acc: 39.51%
Val Loss: 1.9407 | Val Acc: 31.20%
----------------------------------------------------------------------
Epoch 6: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:28<00:00, 11.64it/s, loss=1.72, acc=39.6]
Warning: Possible overfitting detected (gap: 5.32%)
Epoch 6:
Train Loss: 1.7204 | Train Acc: 39.61%
Val Loss: 1.8729 | Val Acc: 34.29%
----------------------------------------------------------------------
Epoch 7: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:26<00:00, 11.71it/s, loss=1.72, acc=39.6]
Epoch 7:
Train Loss: 1.7196 | Train Acc: 39.61%
Val Loss: 1.7709 | Val Acc: 40.02%
----------------------------------------------------------------------
Epoch 8: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:50<00:00, 10.77it/s, loss=1.72, acc=39.8]
Warning: Possible overfitting detected (gap: 5.33%)
Epoch 8:
Train Loss: 1.7165 | Train Acc: 39.79%
Val Loss: 1.9203 | Val Acc: 34.47%
----------------------------------------------------------------------
Epoch 9: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:22<00:00, 11.89it/s, loss=1.71, acc=40]
Warning: Possible overfitting detected (gap: 5.13%)
Epoch 9:
Train Loss: 1.7121 | Train Acc: 40.03%
Val Loss: 1.9205 | Val Acc: 34.91%
----------------------------------------------------------------------
Epoch 10: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:28<00:00, 11.62it/s, loss=1.7, acc=40.4]
Warning: Possible overfitting detected (gap: 0.15%)
Epoch 10:
Train Loss: 1.7044 | Train Acc: 40.37%
Val Loss: 1.8008 | Val Acc: 40.22%
----------------------------------------------------------------------
Epoch 11: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:49<00:00, 10.81it/s, loss=1.71, acc=40.1]
Warning: Possible overfitting detected (gap: 13.33%)
Epoch 11:
Train Loss: 1.7085 | Train Acc: 40.13%
Val Loss: 1.9674 | Val Acc: 26.80%
----------------------------------------------------------------------
Epoch 12: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:23<00:00, 11.86it/s, loss=1.59, acc=45]
Warning: Possible overfitting detected (gap: 2.50%)
Epoch 12:
Train Loss: 1.5883 | Train Acc: 44.99%
Val Loss: 1.7200 | Val Acc: 42.49%
----------------------------------------------------------------------
Epoch 13: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:24<00:00, 11.79it/s, loss=1.56, acc=46]
Warning: Possible overfitting detected (gap: 5.92%)
Epoch 13:
Train Loss: 1.5588 | Train Acc: 45.96%
Val Loss: 1.7428 | Val Acc: 40.04%
----------------------------------------------------------------------
Epoch 14: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [17:41<00:00,  2.94it/s, loss=1.55, acc=46.3]
Warning: Possible overfitting detected (gap: 6.27%)
Epoch 14:
Train Loss: 1.5457 | Train Acc: 46.27%
Val Loss: 1.8012 | Val Acc: 40.00%
----------------------------------------------------------------------
Epoch 15: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:30<00:00, 11.54it/s, loss=1.54, acc=46.5]
Warning: Possible overfitting detected (gap: 12.56%)
Epoch 15:
Train Loss: 1.5368 | Train Acc: 46.54%
Val Loss: 1.8681 | Val Acc: 33.99%
----------------------------------------------------------------------
Epoch 16: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [05:07<00:00, 10.15it/s, loss=1.53, acc=46.9]
Warning: Possible overfitting detected (gap: 4.30%)
Epoch 16:
Train Loss: 1.5258 | Train Acc: 46.89%
Val Loss: 1.7483 | Val Acc: 42.59%
----------------------------------------------------------------------
Epoch 17: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:22<00:00, 11.92it/s, loss=1.48, acc=48.7]
Warning: Possible overfitting detected (gap: 6.58%)
Epoch 17:
Train Loss: 1.4790 | Train Acc: 48.71%
Val Loss: 1.7263 | Val Acc: 42.13%
Early stopping triggered!
2024-12-04 17:35:21.239 Python[13499:1553852] +[IMKClient subclass]: chose IMKClient_Legacy
2024-12-04 17:35:21.239 Python[13499:1553852] +[IMKInputSession subclass]: chose IMKInputSession_Legacy


(.venv) (base) aryansingh@Aryans-MacBook-Air CV_CNN % python -u "/Users/aryansingh/Documents/CV_Practice/CV_CNN/src/main.py"
Using device: mps
Predicting test images: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 300000/300000 [11:42<00:00, 426.88it/s]

Predictions saved to predictions.csv


(.venv) (base) aryansingh@Aryans-MacBook-Air CV_CNN % python3.10 src/main.py

Using device: mps

Model Performance Metrics:
Overall Accuracy: 0.4596
Weighted Precision: 0.5429
Weighted Recall: 0.4596
Weighted F1-Score: 0.4684

Detailed Classification Report:
              precision    recall  f1-score   support

    airplane       0.57      0.41      0.48      5010
  automobile       0.83      0.36      0.50      4972
        bird       0.38      0.39      0.38      4953
         cat       0.22      0.53      0.31      4873
        deer       0.45      0.36      0.40      4967
         dog       0.44      0.36      0.40      4983
        frog       0.58      0.58      0.58      5042
       horse       0.71      0.41      0.52      5075
        ship       0.46      0.80      0.58      5030
       truck       0.77      0.39      0.52      5095

    accuracy                           0.46     50000
   macro avg       0.54      0.46      0.47     50000
weighted avg       0.54      0.46      0.47     50000

2024-12-04 23:12:34.127 Python[34154:2031150] +[IMKClient subclass]: chose IMKClient_Legacy
2024-12-04 23:12:34.127 Python[34154:2031150] +[IMKInputSession subclass]: chose IMKInputSession_Legacy
Validation metrics:  {'accuracy': 0.4596, 'precision': np.float64(0.5428816200624905), 'recall': np.float64(0.4596), 'f1': np.float64(0.4684058168868776), 'detailed_report': '              precision    recall  f1-score   support\n\n    airplane       0.57      0.41      0.48      5010\n  automobile       0.83      0.36      0.50      4972\n        bird       0.38      0.39      0.38      4953\n         cat       0.22      0.53      0.31      4873\n        deer       0.45      0.36      0.40      4967\n         dog       0.44      0.36      0.40      4983\n        frog       0.58      0.58      0.58      5042\n       horse       0.71      0.41      0.52      5075\n        ship       0.46      0.80      0.58      5030\n       truck       0.77      0.39      0.52      5095\n\n    accuracy                           0.46     50000\n   macro avg       0.54      0.46      0.47     50000\nweighted avg       0.54      0.46      0.47     50000\n', 'confusion_matrix': array([[2044,   33,  528,  629,   75,   40,   63,   28, 1498,   72],
       [ 541, 1779,   67,  857,   53,   27,   97,   14, 1323,  214],
       [ 262,    3, 1939, 1357,  417,  261,  419,   84,  195,   16],
       [  36,    3,  330, 2583,  224, 1037,  419,  108,  101,   32],
       [ 107,    8,  973,  881, 1800,  175,  590,  270,  124,   39],
       [  16,    4,  407, 1921,  300, 1798,  166,  303,   54,   14],
       [  16,    1,  429, 1187,  312,  127, 2917,    5,   42,    6],
       [  80,   11,  282,  955,  772,  523,  131, 2100,   70,  151],
       [ 191,   10,  148,  521,   15,    9,   67,    4, 4030,   35],
       [ 274,  297,   38,  827,   32,  116,  122,   42, 1357, 1990]])} 


1. Overall performance metrics:
   - Accuracy: 45.52%
   - Precision: 53.66%
   - Recall: 45.52%
   - F1-Score: 46.39%

2. Class-wise performance varies significantly:
   - Best performing: Automobile (precision: 82%)
   - Poorest performing: Cat (precision: 22%)
   - Most balanced: Frog (precision & recall both ~58%)

3. Still missing:
   - Confusion matrix visualization (though the code generates it)
   - Training/validation loss plots (should be saved as 'training_history.png')

These metrics suggest room for improvement, possibly through:
- Longer training
- Model architecture adjustments 
- Additional regularization
- Data augmentation refinement



Using device: mps
Using device: mps
Epoch 1: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [05:37<00:00, 18.53it/s, loss=1.11, acc=60.7]
Epoch 1: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████▉| 6249/6250 [05:29<00:00, 17.14it/s, loss=1.11, acc=60.7]
Train Loss: 1.1061 | Train Acc: 60.67%
Val Loss: 0.7353 | Val Acc: 74.58%
Saved model with val_acc: 74.58%
----------------------------------------------------------------------
Epoch 2: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [05:40<00:00, 18.33it/s, loss=0.762, acc=73.6]
Epoch 2: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 6249/6250 [05:38<00:00, 24.50it/s, loss=0.762, acc=73.6]
Train Loss: 0.7619 | Train Acc: 73.57%
Val Loss: 0.5701 | Val Acc: 80.27%
Saved model with val_acc: 80.27%
----------------------------------------------------------------------
Epoch 3: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [05:13<00:00, 19.94it/s, loss=0.651, acc=77.5]
Epoch 3: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 6249/6250 [05:04<00:00, 23.37it/s, loss=0.651, acc=77.5]
Train Loss: 0.6507 | Train Acc: 77.53%
Val Loss: 0.4815 | Val Acc: 83.46%
Saved model with val_acc: 83.46%
----------------------------------------------------------------------
Epoch 4: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [05:06<00:00, 20.42it/s, loss=0.588, acc=79.5]
Epoch 4: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [04:58<00:00, 24.01it/s, loss=0.588, acc=79.5]
Train Loss: 0.5883 | Train Acc: 79.54%
Val Loss: 0.4285 | Val Acc: 85.19%
Saved model with val_acc: 85.19%
----------------------------------------------------------------------
Epoch 5: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 6250/6250 [05:05<00:00, 20.45it/s, loss=0.545, acc=81.1]
Epoch 5: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 6249/6250 [05:00<00:00, 23.76it/s, loss=0.545, acc=81.1]
Train Loss: 0.5446 | Train Acc: 81.15%
Val Loss: 0.4033 | Val Acc: 85.96%
Saved model with val_acc: 85.96%
----------------------------------------------------------------------
2024-12-05 00:29:02.332 Python[43173:2077474] +[IMKClient subclass]: chose IMKClient_Legacy
2024-12-05 00:29:02.333 Python[43173:2077474] +[IMKInputSession subclass]: chose IMKInputSession_Legacy
Hyperparameter tuning:
Config: {'optimizer': ('AdamW', {'lr': 0.001, 'weight_decay': 0.01}), 'conv_filters': [32, 64, 128], 'dropout_rate': 0.3, 'batch_size': 32}
Epoch 1: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [06:19<00:00,  8.24it/s, loss=1.31, acc=53]
Epoch 1: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████▉| 3124/3125 [05:59<00:00,  8.10it/s, loss=1.31, acc=53]
Train Loss: 1.3141 | Train Acc: 53.01%
Val Loss: 0.8741 | Val Acc: 68.95%
Saved model with val_acc: 68.95%
----------------------------------------------------------------------
Epoch 2: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [06:08<00:00,  8.47it/s, loss=0.907, acc=68.1]
Epoch 2: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 3124/3125 [05:48<00:00, 10.13it/s, loss=0.907, acc=68.1]
Train Loss: 0.9075 | Train Acc: 68.06%
Val Loss: 0.6805 | Val Acc: 75.89%
Saved model with val_acc: 75.89%
----------------------------------------------------------------------
Epoch 3: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [06:08<00:00,  8.47it/s, loss=0.765, acc=73.3]
Epoch 3: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 3124/3125 [06:03<00:00,  9.79it/s, loss=0.765, acc=73.3]
Train Loss: 0.7650 | Train Acc: 73.31%
Val Loss: 0.5570 | Val Acc: 80.58%
Saved model with val_acc: 80.58%
----------------------------------------------------------------------
Epoch 4: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [06:07<00:00,  8.49it/s, loss=0.681, acc=76.3]
Epoch 4: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████▉| 3124/3125 [05:47<00:00,  9.00it/s, loss=0.681, acc=76.3]
Train Loss: 0.6806 | Train Acc: 76.29%
Val Loss: 0.5067 | Val Acc: 82.36%
Saved model with val_acc: 82.36%
----------------------------------------------------------------------
Epoch 5: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [06:10<00:00,  8.45it/s, loss=0.62, acc=78.4]
Epoch 5: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████▉| 3124/3125 [06:04<00:00, 10.28it/s, loss=0.62, acc=78.4]
Train Loss: 0.6204 | Train Acc: 78.40%
Val Loss: 0.5062 | Val Acc: 82.50%
Saved model with val_acc: 82.50%
Early stopping triggered!
Hyperparameter tuning:
Config: {'optimizer': ('SGD', {'lr': 0.01, 'momentum': 0.9}), 'conv_filters': [64, 128, 256], 'dropout_rate': 0.5, 'batch_size': 64}
Epoch 1: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 1563/1563 [02:04<00:00, 12.51it/s, loss=1.24, acc=55.6]
Epoch 1: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████▉| 1562/1563 [02:00<00:00, 19.36it/s, loss=1.24, acc=55.6]
Train Loss: 1.2362 | Train Acc: 55.59%
Val Loss: 0.9137 | Val Acc: 67.74%
Saved model with val_acc: 67.74%
Early stopping triggered!
Hyperparameter tuning:
Config: {'optimizer': ('Adam', {'lr': 0.0005}), 'conv_filters': [16, 32, 64], 'dropout_rate': 0.2, 'batch_size': 128}
Testing configurations: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3/3 [1:09:12<00:00, 1384.01s/it]
Epoch 1: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████| 1563/1563 [02:04<00:00, 12.57it/s, loss=0.885, acc=68.7]
Epoch 1:
Train Loss: 0.8851 | Train Acc: 68.68%
Val Loss: 0.7075 | Val Acc: 74.99%
Saved model with val_acc: 74.99%
Early stopping triggered!

Model Performance Metrics:
Overall Accuracy: 0.6774
Weighted Precision: 0.6878
Weighted Recall: 0.6774
Weighted F1-Score: 0.6744

Detailed Classification Report:
              precision    recall  f1-score   support

    airplane       0.82      0.62      0.71      5148
  automobile       0.86      0.75      0.80      5074
        bird       0.57      0.60      0.59      4912
         cat       0.55      0.41      0.47      5064
        deer       0.54      0.73      0.62      4957
         dog       0.68      0.49      0.57      5039
        frog       0.61      0.85      0.71      4969
       horse       0.74      0.70      0.72      4923
        ship       0.79      0.81      0.80      5004
       truck       0.70      0.81      0.75      4910

    accuracy                           0.68     50000
   macro avg       0.69      0.68      0.67     50000
weighted avg       0.69      0.68      0.67     50000

Validation metrics:  {'accuracy': 0.6774, 'precision': np.float64(0.6878384247646095), 'recall': np.float64(0.6774), 'f1': np.float64(0.6744209613607047), 'detailed_report': '              precision    recall  f1-score   support\n\n    airplane       0.82      0.62      0.71      5148\n  automobile       0.86      0.75      0.80      5074\n        bird       0.57      0.60      0.59      4912\n         cat       0.55      0.41      0.47      5064\n        deer       0.54      0.73      0.62      4957\n         dog       0.68      0.49      0.57      5039\n        frog       0.61      0.85      0.71      4969\n       horse       0.74      0.70      0.72      4923\n        ship       0.79      0.81      0.80      5004\n       truck       0.70      0.81      0.75      4910\n\n    accuracy                           0.68     50000\n   macro avg       0.69      0.68      0.67     50000\nweighted avg       0.69      0.68      0.67     50000\n', 'confusion_matrix': array([[3215,  109,  426,   85,  187,   32,   74,  120,  555,  345],
       [  57, 3791,   41,   35,   52,   16,  138,   30,  121,  793],
       [ 188,   19, 2967,  214,  541,  156,  526,  152,   89,   60],
       [  55,   24,  424, 2080,  607,  626,  857,  226,   87,   78],
       [  77,   11,  379,  139, 3631,   57,  363,  230,   39,   31],
       [  17,   14,  351,  819,  548, 2469,  433,  302,   32,   54],
       [   5,   10,  232,  140,  250,   35, 4230,   20,   26,   21],
       [  18,    8,  210,  139,  731,  193,   81, 3467,   19,   57],
       [ 187,  156,  128,   61,   87,   13,   69,   22, 4061,  220],
       [  82,  289,   46,   59,  120,   34,  108,  122,   91, 3959]])} 

(.venv) (base) aryansingh@Aryans-MacBook-Air CV_CNN % 



(.venv) (base) aryansingh@Aryans-MacBook-Air CV_CNN % python3.10 src/main.py

Using device: mps
/Users/aryansingh/Documents/CV_Practice/CV_CNN/.venv/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/Users/aryansingh/Documents/CV_Practice/CV_CNN/.venv/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Downloading: "https://download.pytorch.org/models/resnet18-f37072fd.pth" to /Users/aryansingh/.cache/torch/hub/checkpoints/resnet18-f37072fd.pth
100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 44.7M/44.7M [00:01<00:00, 40.8MB/s]
Epoch 1: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [02:51<00:00, 18.26it/s, loss=1.92, acc=31.5]
Epoch 1:
Train Loss: 1.9209 | Train Acc: 31.54%
Val Loss: 1.7846 | Val Acc: 37.40%
Saved model with val_acc: 37.40%
----------------------------------------------------------------------
Epoch 2: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [02:52<00:00, 18.15it/s, loss=1.76, acc=38]
Epoch 2:
Train Loss: 1.7566 | Train Acc: 37.97%
Val Loss: 1.7156 | Val Acc: 39.83%
Saved model with val_acc: 39.83%
----------------------------------------------------------------------
Epoch 3: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [02:48<00:00, 18.58it/s, loss=1.73, acc=39.2]
Epoch 3:
Train Loss: 1.7251 | Train Acc: 39.17%
Val Loss: 1.6996 | Val Acc: 40.55%
Saved model with val_acc: 40.55%
----------------------------------------------------------------------
Epoch 4: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [04:45<00:00, 10.95it/s, loss=1.71, acc=39.7]
Epoch 4:
Train Loss: 1.7090 | Train Acc: 39.70%
Val Loss: 1.6935 | Val Acc: 40.74%
Saved model with val_acc: 40.74%
----------------------------------------------------------------------
Epoch 5: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 3125/3125 [02:47<00:00, 18.62it/s, loss=1.7, acc=40.1]
Epoch 5:
Train Loss: 1.7004 | Train Acc: 40.12%
Val Loss: 1.6858 | Val Acc: 41.09%
Saved model with val_acc: 41.09%
----------------------------------------------------------------------
2024-12-05 02:01:01.679 Python[70449:2208931] +[IMKClient subclass]: chose IMKClient_Legacy
2024-12-05 02:01:01.679 Python[70449:2208931] +[IMKInputSession subclass]: chose IMKInputSession_Legacy

Model Performance Metrics:
Overall Accuracy: 0.4109
Weighted Precision: 0.4112
Weighted Recall: 0.4109
Weighted F1-Score: 0.4068

Detailed Classification Report:
              precision    recall  f1-score   support

    airplane       0.42      0.47      0.45      4907
  automobile       0.47      0.39      0.43      4943
        bird       0.38      0.28      0.32      5005
         cat       0.35      0.33      0.34      5155
        deer       0.36      0.38      0.37      4934
         dog       0.43      0.28      0.34      4980
        frog       0.42      0.55      0.48      5013
       horse       0.40      0.43      0.42      5023
        ship       0.46      0.51      0.48      5029
       truck       0.41      0.48      0.44      5011

    accuracy                           0.41     50000
   macro avg       0.41      0.41      0.41     50000
weighted avg       0.41      0.41      0.41     50000
